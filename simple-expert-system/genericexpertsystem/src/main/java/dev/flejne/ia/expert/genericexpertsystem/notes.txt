 public int estApplicable(Regle regle) {
    int niveauMax = NOT_APPLICABLE_RULE;
    // boolean utiliseNouveauFait = false;
    for (IFait<? extends Object> premisse : regle.getPremisses()) {
      // IFait<? extends Object> nouveauFait = null;
      Optional<IFait<? extends Object>> fait = this.baseDeFaits.chercher(premisse.getNom());
      if (!fait.isPresent()) {
        // Si pas de question le fait est un fait inféré
        if (premisse.getQuestion()
                    .isPresent()) {
          fait = FaitFactory.fromQuestion(premisse, this);
          fait.ifPresent(baseDeFaits::add);
          //IFait<? extends Object> nouveauFait = FaitFactory.fromQuestion(premisse, this);
          //fait = Optional.of(FaitFactory.fromQuestion(premisse, this));
          //this.baseDeFaits.add(nouveauFait);
          //fait = Optional.of(nouveauFait);
          // utiliseNouveauFait =
          //this.baseDeFaits.add(fait.get());
        } else {
          // la regle ne peut pas s'appliquer
          return NOT_APPLICABLE_RULE;
        }
      }

      // IFait<? extends Object> faitCourant = (utiliseNouveauFait) ? nouveauFait : faitDeLaBaseDefaits.get();
      if (!fait.getValeur()
               .equals(premisse.getValeur())) {
        return NOT_APPLICABLE_RULE;
      } else {
        niveauMax = Math.max(niveauMax, fait.getNiveau());
      }
    }
    return niveauMax;
  }
